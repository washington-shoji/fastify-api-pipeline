name: Node.js Fastfy CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      #   - name: Run linting
      #     run: npm run lint

      #   - name: Build the project
      #     run: npm run build

  unit-tests:
    needs: build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit

  integration-tests:
    needs: unit-tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
          DB_CONNECTION_STRING: 'postgres://postgres:postgres@localhost:5432/postgres'
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd "pg_isready -U postgres -d postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set environment variables
        run: |
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> $GITHUB_ENV
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> $GITHUB_ENV

      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "$(date) - waiting for database to start"
            sleep 2
          done

      - name: Start server and run migrations
        run: npm run build

      - name: Test postgres connection
        run: psql postgres://postgres:postgres@localhost:5432/postgres -c 'SELECT 1;'

      - name: Start sever
        run: npm run start & sleep 10
        # Adding a sleep command to allow some time for the server to start and migrations to run

      - name: Run integration tests
        run: npm run test:integration
